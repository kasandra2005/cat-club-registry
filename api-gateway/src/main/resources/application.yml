server:
  port: 8080

spring:
  application:
    name: api-gateway
  cloud:
    circuitbreaker:
      resilience4j:
        enabled: true
        instances:
          default:
            registerHealthIndicator: true
            slidingWindowType: COUNT_BASED
            slidingWindowSize: 10
            minimumNumberOfCalls: 5
            permittedNumberOfCallsInHalfOpenState: 3
            automaticTransitionFromOpenToHalfOpenEnabled: true
            waitDurationInOpenState: 10s
            failureRateThreshold: 50
    gateway:
      discovery:
        locator:
          enabled: false
      routes:
        # Основные сервисы
        - id: owner-service
          uri: http://owner-service:8080
          predicates:
            - Path=/api/owners/**
          filters:
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 10  # Количество запросов в секунду
                redis-rate-limiter.burstCapacity: 20   # Максимальное количество запросов
                redis-rate-limiter.requestedTokens: 1  # Количество токенов на запрос
                key-resolver: "#{@remoteAddressKeyResolver}"
          metadata:
            metrics:
              name: owner.route
              tags:
                service: owner

        - id: cat-service
          uri: http://cat-service:8080
          predicates:
            - Path=/api/cats/**
          metadata:
            metrics:
              name: cat.route
              tags:
                service: cat

        - id: pedigree-service
          uri: http://pedigree-service:8080
          predicates:
            - Path=/api/pedigrees/**
          metadata:
            metrics:
              name: pedigree.route
              tags:
                service: pedigree

        # Swagger UI (перенаправляем на owner-service)
        - id: swagger-ui
          uri: http://owner-service:8080
          predicates:
            - Path=/swagger-ui.html
          filters:
            - RewritePath=/swagger-ui.html, /swagger-ui/index.html
          metadata:
            metrics:
              name: swagger.ui.route
              tags:
                type: documentation

        # Swagger ресурсы (для корректной работы UI)
        - id: swagger-resources
          uri: http://owner-service:8080
          predicates:
            - Path=/swagger-resources/**
          metadata:
            metrics:
              name: swagger.resources.route
              tags:
                type: documentation

        # API документация сервисов
        - id: owner-api-docs
          uri: http://owner-service:8080
          predicates:
            - Path=/owner-api/v3/api-docs
          filters:
            - RewritePath=/owner-api/v3/api-docs, /v3/api-docs
          metadata:
            metrics:
              name: owner.api.docs.route
              tags:
                type: documentation

        - id: cat-api-docs
          uri: http://cat-service:8080
          predicates:
            - Path=/cat-api/v3/api-docs
          filters:
            - RewritePath=/cat-api/v3/api-docs, /v3/api-docs
          metadata:
            metrics:
              name: cat.api.docs.route
              tags:
                type: documentation

        - id: pedigree-api-docs
          uri: http://pedigree-service:8080
          predicates:
            - Path=/pedigree-api/v3/api-docs
          filters:
            - RewritePath=/pedigree-api/v3/api-docs, /v3/api-docs
          metadata:
            metrics:
              name: pedigree.api.docs.route
              tags:
                type: documentation

      metrics:
        enabled: true
        tags:
          route:
            enabled: true
          uri:
            enabled: true
          status:
            enabled: true
          outcome:
            enabled: true
          exception:
            enabled: true
          http:
            method:
              enabled: true
  data:
    redis:
      host: redis
      port: 6379
  main:
    allow-bean-definition-overriding: true

management:
  endpoints:
    web:
      exposure:
        include: health, prometheus  # Только необходимое
      base-path: /actuator
  metrics:
    tags:
      application: ${spring.application.name}  # Обязательный тег
    distribution:
      percentiles-histogram:
        http.server.requests: true  # Для гистограмм latency
      percentiles:
        http.server.requests: 0.5,0.95,0.99  # Ключевые перцентили
  endpoint:
    gateway:
      enabled: true
  prometheus:
    metrics:
      export:
        enabled: true


logging:
  level:
    org.springframework.cloud.gateway: DEBUG
    org.springframework.web: TRACE
    io.micrometer: INFO
    org.springframework.boot.actuate.metrics: DEBUG